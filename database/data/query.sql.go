// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIssue = `-- name: CreateIssue :one
INSERT INTO
    issues (
        sign_request_id,
        number,
        copy,
        description
    )
VALUES ($1, $2, $3, $4) RETURNING id, sign_request_id, number, copy, description
`

type CreateIssueParams struct {
	SignRequestID string
	Number        string
	Copy          int32
	Description   pgtype.Text
}

// Query to create a new issue
func (q *Queries) CreateIssue(ctx context.Context, arg CreateIssueParams) (Issue, error) {
	row := q.db.QueryRow(ctx, createIssue,
		arg.SignRequestID,
		arg.Number,
		arg.Copy,
		arg.Description,
	)
	var i Issue
	err := row.Scan(
		&i.ID,
		&i.SignRequestID,
		&i.Number,
		&i.Copy,
		&i.Description,
	)
	return i, err
}

const createNetworkInterface = `-- name: CreateNetworkInterface :one
INSERT INTO
    network_interfaces (
        sign_request_id,
        name,
        ip,
        dsn
    )
VALUES ($1, $2, $3, $4) RETURNING id, sign_request_id, name, ip, dsn
`

type CreateNetworkInterfaceParams struct {
	SignRequestID string
	Name          pgtype.Text
	Ip            pgtype.Text
	Dsn           pgtype.Text
}

// Query to create a new network interface
func (q *Queries) CreateNetworkInterface(ctx context.Context, arg CreateNetworkInterfaceParams) (NetworkInterface, error) {
	row := q.db.QueryRow(ctx, createNetworkInterface,
		arg.SignRequestID,
		arg.Name,
		arg.Ip,
		arg.Dsn,
	)
	var i NetworkInterface
	err := row.Scan(
		&i.ID,
		&i.SignRequestID,
		&i.Name,
		&i.Ip,
		&i.Dsn,
	)
	return i, err
}

const createSignRequest = `-- name: CreateSignRequest :one
INSERT INTO
    sign_requests (
        request_user,
        holder_id,
        holder_name,
        notes,
        status,
        token
    )
VALUES ($1, $2, $3, $4, $5, $6) RETURNING request_id, request_user, holder_id, holder_name, notes, status, token, created_at, updated_at, signed_at
`

type CreateSignRequestParams struct {
	RequestUser string
	HolderID    string
	HolderName  string
	Notes       pgtype.Text
	Status      pgtype.Text
	Token       string
}

// Query to create a new sign request
func (q *Queries) CreateSignRequest(ctx context.Context, arg CreateSignRequestParams) (SignRequest, error) {
	row := q.db.QueryRow(ctx, createSignRequest,
		arg.RequestUser,
		arg.HolderID,
		arg.HolderName,
		arg.Notes,
		arg.Status,
		arg.Token,
	)
	var i SignRequest
	err := row.Scan(
		&i.RequestID,
		&i.RequestUser,
		&i.HolderID,
		&i.HolderName,
		&i.Notes,
		&i.Status,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SignedAt,
	)
	return i, err
}

const createSignSubmission = `-- name: CreateSignSubmission :one
INSERT INTO
    sign_submissions (
        sign_request_id,
        sign,
        location_latitude,
        location_longitude
    )
VALUES ($1, $2, $3, $4) RETURNING id, sign_request_id, sign, location_latitude, location_longitude, submitted_at
`

type CreateSignSubmissionParams struct {
	SignRequestID     string
	Sign              []byte
	LocationLatitude  pgtype.Float8
	LocationLongitude pgtype.Float8
}

// Query to create a new sign submission
func (q *Queries) CreateSignSubmission(ctx context.Context, arg CreateSignSubmissionParams) (SignSubmission, error) {
	row := q.db.QueryRow(ctx, createSignSubmission,
		arg.SignRequestID,
		arg.Sign,
		arg.LocationLatitude,
		arg.LocationLongitude,
	)
	var i SignSubmission
	err := row.Scan(
		&i.ID,
		&i.SignRequestID,
		&i.Sign,
		&i.LocationLatitude,
		&i.LocationLongitude,
		&i.SubmittedAt,
	)
	return i, err
}

const deleteIssue = `-- name: DeleteIssue :exec
DELETE FROM issues WHERE id = $1
`

// Query to delete an issue
func (q *Queries) DeleteIssue(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteIssue, id)
	return err
}

const deleteNetworkInterface = `-- name: DeleteNetworkInterface :exec
DELETE FROM network_interfaces WHERE id = $1
`

// Query to delete a network interface
func (q *Queries) DeleteNetworkInterface(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteNetworkInterface, id)
	return err
}

const deleteSignRequest = `-- name: DeleteSignRequest :exec
DELETE FROM sign_requests WHERE request_id = $1
`

// Query to delete a sign request
func (q *Queries) DeleteSignRequest(ctx context.Context, requestID string) error {
	_, err := q.db.Exec(ctx, deleteSignRequest, requestID)
	return err
}

const deleteSignSubmission = `-- name: DeleteSignSubmission :exec
DELETE FROM sign_submissions WHERE id = $1
`

// Query to delete a sign submission
func (q *Queries) DeleteSignSubmission(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSignSubmission, id)
	return err
}

const getAllSignRequests = `-- name: GetAllSignRequests :many
SELECT request_id, request_user, holder_id, holder_name, notes, status, token, created_at, updated_at, signed_at FROM sign_requests
`

// Query to get all sign requests
func (q *Queries) GetAllSignRequests(ctx context.Context) ([]SignRequest, error) {
	rows, err := q.db.Query(ctx, getAllSignRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignRequest
	for rows.Next() {
		var i SignRequest
		if err := rows.Scan(
			&i.RequestID,
			&i.RequestUser,
			&i.HolderID,
			&i.HolderName,
			&i.Notes,
			&i.Status,
			&i.Token,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SignedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIssuesBySignRequestID = `-- name: GetIssuesBySignRequestID :many
SELECT id, sign_request_id, number, copy, description FROM issues WHERE sign_request_id = $1
`

// Query to get all issues for a sign request
func (q *Queries) GetIssuesBySignRequestID(ctx context.Context, signRequestID string) ([]Issue, error) {
	rows, err := q.db.Query(ctx, getIssuesBySignRequestID, signRequestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Issue
	for rows.Next() {
		var i Issue
		if err := rows.Scan(
			&i.ID,
			&i.SignRequestID,
			&i.Number,
			&i.Copy,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNetworkInterfacesBySignRequestID = `-- name: GetNetworkInterfacesBySignRequestID :many
SELECT id, sign_request_id, name, ip, dsn FROM network_interfaces WHERE sign_request_id = $1
`

// Query to get all network interfaces for a sign request
func (q *Queries) GetNetworkInterfacesBySignRequestID(ctx context.Context, signRequestID string) ([]NetworkInterface, error) {
	rows, err := q.db.Query(ctx, getNetworkInterfacesBySignRequestID, signRequestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NetworkInterface
	for rows.Next() {
		var i NetworkInterface
		if err := rows.Scan(
			&i.ID,
			&i.SignRequestID,
			&i.Name,
			&i.Ip,
			&i.Dsn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSignRequestByID = `-- name: GetSignRequestByID :one
SELECT request_id, request_user, holder_id, holder_name, notes, status, token, created_at, updated_at, signed_at FROM sign_requests WHERE request_id = $1
`

// Query to get a sign request by ID
func (q *Queries) GetSignRequestByID(ctx context.Context, requestID string) (SignRequest, error) {
	row := q.db.QueryRow(ctx, getSignRequestByID, requestID)
	var i SignRequest
	err := row.Scan(
		&i.RequestID,
		&i.RequestUser,
		&i.HolderID,
		&i.HolderName,
		&i.Notes,
		&i.Status,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SignedAt,
	)
	return i, err
}

const getSignSubmissionsBySignRequestID = `-- name: GetSignSubmissionsBySignRequestID :many
SELECT id, sign_request_id, sign, location_latitude, location_longitude, submitted_at FROM sign_submissions WHERE sign_request_id = $1
`

// Query to get all sign submissions for a sign request
func (q *Queries) GetSignSubmissionsBySignRequestID(ctx context.Context, signRequestID string) ([]SignSubmission, error) {
	rows, err := q.db.Query(ctx, getSignSubmissionsBySignRequestID, signRequestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignSubmission
	for rows.Next() {
		var i SignSubmission
		if err := rows.Scan(
			&i.ID,
			&i.SignRequestID,
			&i.Sign,
			&i.LocationLatitude,
			&i.LocationLongitude,
			&i.SubmittedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSignRequestStatus = `-- name: UpdateSignRequestStatus :exec
UPDATE sign_requests
SET
    status = $1,
    updated_at = CURRENT_TIMESTAMP
WHERE
    request_id = $2
`

type UpdateSignRequestStatusParams struct {
	Status    pgtype.Text
	RequestID string
}

// Query to update a sign request status
func (q *Queries) UpdateSignRequestStatus(ctx context.Context, arg UpdateSignRequestStatusParams) error {
	_, err := q.db.Exec(ctx, updateSignRequestStatus, arg.Status, arg.RequestID)
	return err
}
