// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.3.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List sign requests
	// (GET /auth/key-otg/sign)
	GetAuthKeyOtgSign(ctx echo.Context) error
	// Create a new signing request using requestID
	// (POST /auth/key-otg/sign/create)
	PostAuthKeyOtgSignCreate(ctx echo.Context, params PostAuthKeyOtgSignCreateParams) error
	// Sign the request using requestID
	// (POST /auth/key-otg/sign/submit/{requestID})
	PostAuthKeyOtgSignSubmitRequestID(ctx echo.Context, requestID RequestID) error
	// Get signed request using requestID
	// (GET /auth/key-otg/sign/{requestID})
	GetAuthKeyOtgSignRequestID(ctx echo.Context, requestID RequestID) error
	// Create a new signing request
	// (POST /key-otg/sign)
	PostKeyOtgSign(ctx echo.Context, params PostKeyOtgSignParams) error
	// Get signed request
	// (GET /key-otg/sign/{requestID})
	GetKeyOtgSignRequestID(ctx echo.Context, requestID RequestID, params GetKeyOtgSignRequestIDParams) error
	// Sign the request
	// (POST /key-otg/sign/{requestID})
	PostKeyOtgSignRequestID(ctx echo.Context, requestID RequestID, params PostKeyOtgSignRequestIDParams) error
	// Get QR code for this request
	// (GET /key-otg/sign/{requestID}/qr)
	GetKeyOtgSignRequestIDQr(ctx echo.Context, requestID RequestID, params GetKeyOtgSignRequestIDQrParams) error
	// Shutdown the server
	// (POST /shutdown)
	PostShutdown(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAuthKeyOtgSign converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthKeyOtgSign(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthKeyOtgSign(ctx)
	return err
}

// PostAuthKeyOtgSignCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthKeyOtgSignCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthKeyOtgSignCreateParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Portier-Agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Portier-Agent")]; found {
		var XPortierAgent XPortierAgent
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Portier-Agent, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Portier-Agent", valueList[0], &XPortierAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Portier-Agent: %s", err))
		}

		params.XPortierAgent = XPortierAgent
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Portier-Agent is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthKeyOtgSignCreate(ctx, params)
	return err
}

// PostAuthKeyOtgSignSubmitRequestID converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthKeyOtgSignSubmitRequestID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "requestID" -------------
	var requestID RequestID

	err = runtime.BindStyledParameterWithOptions("simple", "requestID", ctx.Param("requestID"), &requestID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requestID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthKeyOtgSignSubmitRequestID(ctx, requestID)
	return err
}

// GetAuthKeyOtgSignRequestID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthKeyOtgSignRequestID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "requestID" -------------
	var requestID RequestID

	err = runtime.BindStyledParameterWithOptions("simple", "requestID", ctx.Param("requestID"), &requestID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requestID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthKeyOtgSignRequestID(ctx, requestID)
	return err
}

// PostKeyOtgSign converts echo context to params.
func (w *ServerInterfaceWrapper) PostKeyOtgSign(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostKeyOtgSignParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Portier-Agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Portier-Agent")]; found {
		var XPortierAgent XPortierAgent
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Portier-Agent, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Portier-Agent", valueList[0], &XPortierAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Portier-Agent: %s", err))
		}

		params.XPortierAgent = XPortierAgent
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Portier-Agent is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostKeyOtgSign(ctx, params)
	return err
}

// GetKeyOtgSignRequestID converts echo context to params.
func (w *ServerInterfaceWrapper) GetKeyOtgSignRequestID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "requestID" -------------
	var requestID RequestID

	err = runtime.BindStyledParameterWithOptions("simple", "requestID", ctx.Param("requestID"), &requestID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requestID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeyOtgSignRequestIDParams
	// ------------- Required query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Portier-Agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Portier-Agent")]; found {
		var XPortierAgent XPortierAgent
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Portier-Agent, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Portier-Agent", valueList[0], &XPortierAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Portier-Agent: %s", err))
		}

		params.XPortierAgent = XPortierAgent
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Portier-Agent is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetKeyOtgSignRequestID(ctx, requestID, params)
	return err
}

// PostKeyOtgSignRequestID converts echo context to params.
func (w *ServerInterfaceWrapper) PostKeyOtgSignRequestID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "requestID" -------------
	var requestID RequestID

	err = runtime.BindStyledParameterWithOptions("simple", "requestID", ctx.Param("requestID"), &requestID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requestID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostKeyOtgSignRequestIDParams
	// ------------- Required query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostKeyOtgSignRequestID(ctx, requestID, params)
	return err
}

// GetKeyOtgSignRequestIDQr converts echo context to params.
func (w *ServerInterfaceWrapper) GetKeyOtgSignRequestIDQr(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "requestID" -------------
	var requestID RequestID

	err = runtime.BindStyledParameterWithOptions("simple", "requestID", ctx.Param("requestID"), &requestID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requestID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeyOtgSignRequestIDQrParams
	// ------------- Required query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Portier-Agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Portier-Agent")]; found {
		var XPortierAgent XPortierAgent
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Portier-Agent, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Portier-Agent", valueList[0], &XPortierAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Portier-Agent: %s", err))
		}

		params.XPortierAgent = XPortierAgent
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Portier-Agent is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetKeyOtgSignRequestIDQr(ctx, requestID, params)
	return err
}

// PostShutdown converts echo context to params.
func (w *ServerInterfaceWrapper) PostShutdown(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostShutdown(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/key-otg/sign", wrapper.GetAuthKeyOtgSign)
	router.POST(baseURL+"/auth/key-otg/sign/create", wrapper.PostAuthKeyOtgSignCreate)
	router.POST(baseURL+"/auth/key-otg/sign/submit/:requestID", wrapper.PostAuthKeyOtgSignSubmitRequestID)
	router.GET(baseURL+"/auth/key-otg/sign/:requestID", wrapper.GetAuthKeyOtgSignRequestID)
	router.POST(baseURL+"/key-otg/sign", wrapper.PostKeyOtgSign)
	router.GET(baseURL+"/key-otg/sign/:requestID", wrapper.GetKeyOtgSignRequestID)
	router.POST(baseURL+"/key-otg/sign/:requestID", wrapper.PostKeyOtgSignRequestID)
	router.GET(baseURL+"/key-otg/sign/:requestID/qr", wrapper.GetKeyOtgSignRequestIDQr)
	router.POST(baseURL+"/shutdown", wrapper.PostShutdown)

}
