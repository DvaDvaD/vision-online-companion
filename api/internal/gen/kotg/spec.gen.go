// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/portierglobal/vision-online-companion/api/internal/gen/generic"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZbW/bOBL+K4TuPiSAYktOHdz6cDh4t5tcbq+bNva1iy2CgBbHEhuZVEkqrq/wfz8M",
	"KVnWi2N7mxZYoJ9iRTPD4TzPvFD87EVykUkBwmhv9NnLqKILMKDs0y18zEGb65f4wEBHimeGS+GNvOuX",
	"RM6JSYBoHgsuYqKccM/zPY4SGTWJ53uCLsAbeWpjyre/uQLmjYzKwfd0lMCC4hrwiS6yFOWDcHz7+/mv",
	"L3/+ZTp5++L29vLyzcUPV8PL8VvP98wqQxltFBext1773lQ+gGh7af9NjCQxGEKjCLQmc6mISbguHS79",
	"/ZiDWlUOG2vxMGc/LkGZVc5lFg7OXww7PfzttVSGgxrHIAyq20UToAxUtepvZ4XYmZM7bP3M6fTfcs2l",
	"ICfvuGByqUkY/p08DntBLzzt8GldGrNY/6SAGpjwWBSoWzoomQHatiKJTBmoe87qq78Og4vztn2/lHdb",
	"29b4FyhFxtEDqAUVwidvQdEuA1zr3KpyAwvrwl8VzL2R95d+Rdt+sYn+tZVeb+xQpegKn4U0bgOVB2Mh",
	"TQKK2FdIEJ3IJf51Pnc5U9DlPteg6sYm0/HttBP0Crz3dX1/K5j1QJW7vtvYk7MPEBl0YRsjnUmhoQ0S",
	"FwbUnEbF0yGB+xXMUqqH61KzK4al903wj8lTv0iqo3OnFYjrkhj1vUcyW9WshxtdDEsMCpVrJWLblS6P",
	"Rb6YNfEOg2CwF+5C0XdOdaHZCntrP0w3PEyMyUb9fvjDoBde/K0X9sIgGF0Mh+fD/gOszqSJ+1iO+7tR",
	"+aeF4B97o+57PGvsenvRzlC18hxMEhwG6NOcjizv2T01dfuDYDA4C8KzIJyGg1EQjILgd8/35lItUNRj",
	"1MCZ4TardlWnP101S2VEkbv3KTXc5KzuzXDQGw42SgUJa1pSxG218Lz3Ihh26D1v7fyy6nF0BfY9zIb2",
	"WPAj1XDxgoCIJAO2mWAYNRTHl8ruzArey/l9IbNrjecmpzbU5Hs5MnFSa9/LM/bcGfL87QuTfJLPFtzs",
	"HDG+Lbm/PjsaQbQLdoZmgzeIfIGiGQjmTMKnzOr73pzy1P7QuZ1l0dTWFLjRaDuhIcoVN6sJMseFekY1",
	"j8a5SfDBMqrYE48qE9hw0L8ZUAWqlHZPlyWJ/v0Oc68yYd82baAXXMxlO95jxohdltDcJHY+xx9S8f9Z",
	"VMkyAUFyjSBEqcwZ0aAeQfXIfzWQcRTJXBhyzQgVjLwavCK2xVk7SFakpX2VUa2XUjGiQGcQGf4I6QoR",
	"Ndxsj9HkF1jdiGkCV5JMQD3yCGn9CEo7f8NegCGRGQiacW/knfeCHrYMPPHY0PbR/1pHxv/GYNqb/w/X",
	"xlKsPI5sHVBosTXO0EtMExuPa+aNvCswiAa6amJMLHtUcA3U+jAIAjcSCVMcOGiWpdwlSv+DdsNPdZo4",
	"qCnV2nSrN62bw9XBu9umqDd6/7nGt/d36zuk/GJB1arTKGJIY41pc6nkgrySM54COUF9EAY3DezUu8Nl",
	"2tj03Xhhi5HUHRi5sZtQImDZPO6SOS7IQD8YmRGaZQVRN+fdNnSvpW5g5xawDKqO3++7oahE+vUjJQap",
	"WPVHyVZHgf8U5u2D4bpe1vBcuv5C9h3qQEm9NtUmCVWwQYW7alBVgnlu8ur9kYx7kgANvJtcfFlQ41Ay",
	"atsg+583Bte7iTlxFZ9Qlw58QWNX6lzvIrzLu31krHVoq3EcKyvNr8XI9hzxFRhJ0/RmvnO/3QXxrouX",
	"BV0crgYHCte853mK7ecoIqIx+9HtQPIdWQgbpCsa1p7G83xM+cZo+UfXvS58p9jLQLBMcmxmGmcORmYr",
	"snCxx5ZwUh6SNuVJuAmcS3FqE3a7gZwIACxdJEogeiBRrhQIQ9yR4PRIxlyB65XAvrRg+QdQqjnyPEM/",
	"7ZF3QOoRWSZgD6CNMYIkFB9xriNZSoUNrAbBusJum8IMjAFFHrnmM55ys+pu1rUh63uL/kYtmtwo8iHH",
	"Uc+qYdVjWpATVMo1NrfTihInVz9PT4lUrhGevL6ZTMtMOaiL70iCDlofWiSfo0A22OMfU1H3C7s7k++l",
	"99jS+0Rt3UWjWu307tb+Hx7o9hSoZ2nGx1Hn+3y3f77bOcB1D2x7yk7/ozqy8rxRf9baY1Ogn4m4jt7m",
	"A+aMC2qvbTtuN+tAYba+uSU2j7DdMJjlcYzQZbnKpG1Zzezelm/cGT/RLnSSGyaXT0xA14IbTg1oQkms",
	"aATzPCWl2uZivfjKdSPSFVlK9UC4IKmMaErgE0Q52uoeWCalA1+YI/VvswvQmsaNy4+JddL6buxXUrkU",
	"vV7vkFufjlyqjNlA8CJMrGPmrb5etg5JpXoVxC28ijV+ksIomXoupZ2Uy4tcpdVNmw13IrUZhYPzc6wA",
	"/w8AAP//ySxARTIhAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "cfg.generic.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
