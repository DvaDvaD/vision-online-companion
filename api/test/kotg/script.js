/*
 * portier KeyOnTheGo Service
 * Add basic auth for authorization when using cloud server. Use Account Id and M2M token for username and password respectively.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * Generator version: 7.10.0-SNAPSHOT
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "/";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.
let xPortierAgent = "TODO_EDIT_THE_X-PORTIER-AGENT";

export default function() {
    group("/key-otg/sign/{requestID}/qr", () => {
        let requestID = 'TODO_EDIT_THE_REQUESTID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let token = 'TODO_EDIT_THE_TOKEN'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/key-otg/sign/${requestID}/qr?token=${token}`;
            let params = {
                headers: {
                    "X-Portier-Agent": `${xPortierAgent}`, "Accept": "image/png"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Get QR code for debugging purpose": (r) => r.status === 200
            });
        }
    });

    group("/key-otg/sign/{requestID}", () => {
        let requestID = 'TODO_EDIT_THE_REQUESTID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let token = 'TODO_EDIT_THE_TOKEN'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/key-otg/sign/${requestID}?token=${token}`;
            let params = {
                headers: {
                    "X-Portier-Agent": `${xPortierAgent}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "This endpoint is used by mobile app (to show request information) and desktop app (need to check current status).": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/key-otg/sign/${requestID}?token=${token}`;
            // TODO: edit the parameters of the request body.
            let body = {"sign": "string"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "X-Portier-Agent": `${xPortierAgent}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Signing submitted successfully.": (r) => r.status === 200
            });
        }
    });

    group("/key-otg/sign", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/key-otg/sign`;
            // TODO: edit the parameters of the request body.
            let body = {"requestUser": "string", "holderId": "string", "holderName": "string", "notes": "string", "issue": "list"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "X-Portier-Agent": `${xPortierAgent}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Share request id and token for future request. Or just share the dsn (and use it) to check (GET) or sign (POST).": (r) => r.status === 200
            });
        }
    });

    group("/shutdown", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/shutdown`;
            let request = http.post(url);

            check(request, {
                "Server shutdown initiated": (r) => r.status === 200
            });
        }
    });

}
